@model AgriEnergyConnect.ViewModels.AddProductViewModel

@{
    ViewData["Title"] = "Farmer Dashboard";
    Layout = "_Layout";
}

<div class="container">
    <div class="row">
        <main class="col-md-12">
            <div
                class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
                <h1 class="h2">My Products</h1>
            </div>

            <!-- Add Product Form -->
            <div class="row mb-4">
                <div class="col-md-6">
                    <h4>Add New Product</h4>
                    <form id="addProductForm">
                        @Html.AntiForgeryToken()
                        <div class="mb-3">
                            <label asp-for="NewProduct.Name" class="form-label"></label>
                            <input asp-for="NewProduct.Name" class="form-control" name="NewProduct.Name" />
                            <span data-valmsg-for="NewProduct.Name" class="text-danger"></span>
                        </div>
                        <div class="mb-3">
                            <label asp-for="NewProduct.Description" class="form-label">Description</label>
                            <textarea asp-for="NewProduct.Description" class="form-control"
                                name="NewProduct.Description" rows="3"></textarea>
                            <span data-valmsg-for="NewProduct.Description" class="text-danger"></span>
                        </div>
                        <div class="mb-3">
                            <label asp-for="NewProduct.Category" class="form-label"></label>
                            <select asp-for="NewProduct.Category" class="form-select" name="NewProduct.Category">
                                <option value="">Choose...</option>
                                <option>Vegetables</option>
                                <option>Fruits</option>
                                <option>Dairy</option>
                                <option>Grains</option>
                            </select>
                            <span data-valmsg-for="NewProduct.Category" class="text-danger"></span>
                        </div>
                            <div class="mb-3">
                                <label asp-for="NewProduct.ProductionDate" class="form-label"></label>
                                <input asp-for="NewProduct.ProductionDate" type="date" class="form-control"
                                    name="NewProduct.ProductionDate" id="productionDate" />
                                <span data-valmsg-for="NewProduct.ProductionDate" class="text-danger"></span>
                            </div>
                        <button type="submit" class="btn btn-primary">Add Product</button>
                    </form>
                </div>
            </div>

            <!-- Product List -->
            <h4>Product List</h4>
            <div class="table-responsive">
                <table class="table table-striped table-hover">
                    <thead>
                        <tr>
                            <th>Product Name</th>
                            <th>Type</th>
                            <th>Harvest Date</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var product in Model.Products)
                        {
                            <tr data-product-id="@product.ProductID">
                                <td>@product.Name</td>
                                <td>@product.Category</td>
                                <td>@product.ProductionDate.ToShortDateString()</td>
                                <td>
                                    <button class="btn btn-sm btn-outline-danger"
                                        onclick="deleteProduct(@product.ProductID)">Delete</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </main>
    </div>
</div>

@section Scripts {
    <script>

        document.addEventListener('DOMContentLoaded', function() {
            const today = new Date().toISOString().split('T')[0];
            document.getElementById('productionDate').value = today;
        });

        document.getElementById("addProductForm").addEventListener("submit", async function (e) {
            e.preventDefault();

            // Clear previous validation messages
            document.querySelectorAll(".text-danger").forEach(el => el.textContent = "");

            const formData = {
                Name: document.querySelector("[name='NewProduct.Name']").value,
                Category: document.querySelector("[name='NewProduct.Category']").value,
                ProductionDate: document.querySelector("[name='NewProduct.ProductionDate']").value,
                Description: document.querySelector("[name='NewProduct.Description']").value || "No Description"

            };

            const token = document.querySelector("input[name='__RequestVerificationToken']").value;

            const response = await fetch('/Farmer/AddProduct', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': token
                },
                body: JSON.stringify(formData)
            });

            if (response.ok) {
                const result = await response.json();
                addProductToTable(result.product);
                document.getElementById("addProductForm").reset();
            } else {
                const errorData = await response.json();
                for (const key in errorData.errors) {
                    const span = document.querySelector(`[data-valmsg-for="NewProduct.${key}"]`);
                    if (span) span.textContent = errorData.errors[key][0];
                }
            }
        });

        function addProductToTable(product) {
            const tableBody = document.querySelector("table tbody");
            const row = document.createElement("tr");
            row.setAttribute('data-product-id', product.productID);
            row.innerHTML = `
                    <td>${product.name}</td>
                    <td>${product.category}</td>
                    <td>${new Date(product.productionDate).toLocaleDateString()}</td>
                    <td>
                        <button class="btn btn-sm btn-outline-danger" onclick="deleteProduct(${product.productID})">Delete</button>
                    </td>`;
            tableBody.appendChild(row);
        }

        async function deleteProduct(productId) {
            if (confirm('Are you sure you want to delete this product?')) {
                const token = document.querySelector("input[name='__RequestVerificationToken']").value;
                try {
                    const response = await fetch(`/Farmer/DeleteProduct/${productId}`, {
                        method: 'DELETE',
                        headers: {
                            'RequestVerificationToken': token
                        }
                    });

                    if (response.ok) {
                        // Remove the row from the table
                        const row = document.querySelector(`tr[data-product-id="${productId}"]`);
                        if (row) {
                            row.remove();
                        } else {
                            console.error(`Row with product ID ${productId} not found`);
                        }
                    } else {
                        const errorData = await response.json();
                        alert(`Failed to delete the product: ${errorData.message || 'Unknown error'}`);
                    }
                } catch (error) {
                    console.error('Error:', error);
                    alert('An error occurred while trying to delete the product. Please try again.');
                }
            }
        }
    </script>
}